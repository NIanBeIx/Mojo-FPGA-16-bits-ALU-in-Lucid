/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  display_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  reg [15:0] M_leds_d, M_leds_q = 1'h0;
  reg [15:0] M_leds2_d, M_leds2_q = 1'h0;
  reg [5:0] M_function_d, M_function_q = 1'h0;
  localparam MANUAL_testingmode = 1'd0;
  localparam AUTO_testingmode = 1'd1;
  
  reg M_testingmode_d, M_testingmode_q = MANUAL_testingmode;
  localparam NUM1_nextnumber = 2'd0;
  localparam NUM2_nextnumber = 2'd1;
  localparam F_nextnumber = 2'd2;
  localparam COMPUTE_nextnumber = 2'd3;
  
  reg [1:0] M_nextnumber_d, M_nextnumber_q = NUM1_nextnumber;
  
  reg [5:0] aluselect;
  
  wire [16-1:0] M_f_out;
  wire [1-1:0] M_f_overflow;
  reg [16-1:0] M_f_a;
  reg [16-1:0] M_f_b;
  reg [6-1:0] M_f_alufn;
  alu_3 f (
    .a(M_f_a),
    .b(M_f_b),
    .alufn(M_f_alufn),
    .out(M_f_out),
    .overflow(M_f_overflow)
  );
  
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_n;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  reg [3-1:0] M_add_alufn20;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  adder_4 add (
    .alufn20(M_add_alufn20),
    .a(M_add_a),
    .b(M_add_b),
    .out(M_add_out),
    .n(M_add_n),
    .z(M_add_z),
    .v(M_add_v)
  );
  
  wire [16-1:0] M_autotest_out;
  tester16_5 autotest (
    .clk(clk),
    .rst(rst),
    .pause(io_dip[16+6+0-:1]),
    .restarttest(io_button[4+0-:1]),
    .out(M_autotest_out)
  );
  
  always @* begin
    M_nextnumber_d = M_nextnumber_q;
    M_testingmode_d = M_testingmode_q;
    M_leds_d = M_leds_q;
    M_leds2_d = M_leds2_q;
    M_function_d = M_function_q;
    
    M_seg_values = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led = 24'h000000;
    led = 8'h00;
    M_f_a = M_leds_q;
    M_f_b = M_leds2_q;
    M_f_alufn = M_function_q;
    M_add_a = M_leds_q;
    M_add_b = M_leds2_q;
    M_add_alufn20 = M_function_q[0+0-:1];
    led[7+0-:1] = M_add_v;
    
    case (M_testingmode_q)
      MANUAL_testingmode: begin
        M_seg_values = 16'h0000;
        led[5+0-:1] = 1'h1;
        if (io_dip[16+7+0-:1] == 1'h1) begin
          M_testingmode_d = AUTO_testingmode;
        end
        
        case (M_nextnumber_q)
          NUM1_nextnumber: begin
            led[1+6-:7] = 7'h00;
            led[0+0-:1] = 1'h1;
            io_led[16+7+0-:1] = 1'h0;
            io_led[16+6+0-:1] = 1'h0;
            io_led[16+5+0-:1] = 1'h0;
            io_led[16+4+0-:1] = 1'h0;
            io_led[16+3+0-:1] = 1'h0;
            io_led[16+2+0-:1] = 1'h0;
            io_led[16+1+0-:1] = 1'h0;
            io_led[16+0+0-:1] = 1'h0;
            M_leds_d[15+0-:1] = io_dip[8+7+0-:1];
            M_leds_d[14+0-:1] = io_dip[8+6+0-:1];
            M_leds_d[13+0-:1] = io_dip[8+5+0-:1];
            M_leds_d[12+0-:1] = io_dip[8+4+0-:1];
            M_leds_d[11+0-:1] = io_dip[8+3+0-:1];
            M_leds_d[10+0-:1] = io_dip[8+2+0-:1];
            M_leds_d[9+0-:1] = io_dip[8+1+0-:1];
            M_leds_d[8+0-:1] = io_dip[8+0+0-:1];
            M_leds_d[7+0-:1] = io_dip[0+7+0-:1];
            M_leds_d[6+0-:1] = io_dip[0+6+0-:1];
            M_leds_d[5+0-:1] = io_dip[0+5+0-:1];
            M_leds_d[4+0-:1] = io_dip[0+4+0-:1];
            M_leds_d[3+0-:1] = io_dip[0+3+0-:1];
            M_leds_d[2+0-:1] = io_dip[0+2+0-:1];
            M_leds_d[1+0-:1] = io_dip[0+1+0-:1];
            M_leds_d[0+0-:1] = io_dip[0+0+0-:1];
            io_led[8+7+0-:1] = M_leds_q[15+0-:1];
            io_led[8+6+0-:1] = M_leds_q[14+0-:1];
            io_led[8+5+0-:1] = M_leds_q[13+0-:1];
            io_led[8+4+0-:1] = M_leds_q[12+0-:1];
            io_led[8+3+0-:1] = M_leds_q[11+0-:1];
            io_led[8+2+0-:1] = M_leds_q[10+0-:1];
            io_led[8+1+0-:1] = M_leds_q[9+0-:1];
            io_led[8+0+0-:1] = M_leds_q[8+0-:1];
            io_led[0+7+0-:1] = M_leds_q[7+0-:1];
            io_led[0+6+0-:1] = M_leds_q[6+0-:1];
            io_led[0+5+0-:1] = M_leds_q[5+0-:1];
            io_led[0+4+0-:1] = M_leds_q[4+0-:1];
            io_led[0+3+0-:1] = M_leds_q[3+0-:1];
            io_led[0+2+0-:1] = M_leds_q[2+0-:1];
            io_led[0+1+0-:1] = M_leds_q[1+0-:1];
            io_led[0+0+0-:1] = M_leds_q[0+0-:1];
            if (io_button[0+0-:1]) begin
              M_nextnumber_d = NUM2_nextnumber;
            end
          end
          NUM2_nextnumber: begin
            led[2+5-:6] = 6'h00;
            led[1+0-:1] = 1'h1;
            led[0+0-:1] = 1'h0;
            io_led[16+7+0-:1] = 1'h0;
            io_led[16+6+0-:1] = 1'h0;
            io_led[16+5+0-:1] = 1'h0;
            io_led[16+4+0-:1] = 1'h0;
            io_led[16+3+0-:1] = 1'h0;
            io_led[16+2+0-:1] = 1'h0;
            io_led[16+1+0-:1] = 1'h0;
            io_led[16+0+0-:1] = 1'h0;
            M_leds2_d[15+0-:1] = io_dip[8+7+0-:1];
            M_leds2_d[14+0-:1] = io_dip[8+6+0-:1];
            M_leds2_d[13+0-:1] = io_dip[8+5+0-:1];
            M_leds2_d[12+0-:1] = io_dip[8+4+0-:1];
            M_leds2_d[11+0-:1] = io_dip[8+3+0-:1];
            M_leds2_d[10+0-:1] = io_dip[8+2+0-:1];
            M_leds2_d[9+0-:1] = io_dip[8+1+0-:1];
            M_leds2_d[8+0-:1] = io_dip[8+0+0-:1];
            M_leds2_d[7+0-:1] = io_dip[0+7+0-:1];
            M_leds2_d[6+0-:1] = io_dip[0+6+0-:1];
            M_leds2_d[5+0-:1] = io_dip[0+5+0-:1];
            M_leds2_d[4+0-:1] = io_dip[0+4+0-:1];
            M_leds2_d[3+0-:1] = io_dip[0+3+0-:1];
            M_leds2_d[2+0-:1] = io_dip[0+2+0-:1];
            M_leds2_d[1+0-:1] = io_dip[0+1+0-:1];
            M_leds2_d[0+0-:1] = io_dip[0+0+0-:1];
            io_led[8+7+0-:1] = M_leds2_q[15+0-:1];
            io_led[8+6+0-:1] = M_leds2_q[14+0-:1];
            io_led[8+5+0-:1] = M_leds2_q[13+0-:1];
            io_led[8+4+0-:1] = M_leds2_q[12+0-:1];
            io_led[8+3+0-:1] = M_leds2_q[11+0-:1];
            io_led[8+2+0-:1] = M_leds2_q[10+0-:1];
            io_led[8+1+0-:1] = M_leds2_q[9+0-:1];
            io_led[8+0+0-:1] = M_leds2_q[8+0-:1];
            io_led[0+7+0-:1] = M_leds2_q[7+0-:1];
            io_led[0+6+0-:1] = M_leds2_q[6+0-:1];
            io_led[0+5+0-:1] = M_leds2_q[5+0-:1];
            io_led[0+4+0-:1] = M_leds2_q[4+0-:1];
            io_led[0+3+0-:1] = M_leds2_q[3+0-:1];
            io_led[0+2+0-:1] = M_leds2_q[2+0-:1];
            io_led[0+1+0-:1] = M_leds2_q[1+0-:1];
            io_led[0+0+0-:1] = M_leds2_q[0+0-:1];
            if (io_button[1+0-:1]) begin
              M_nextnumber_d = F_nextnumber;
            end
          end
          F_nextnumber: begin
            aluselect = io_dip[16+0+5-:6];
            M_function_d = io_dip[16+0+5-:6];
            io_led[16+0+5-:6] = io_dip[16+0+5-:6];
            led[3+4-:5] = 5'h00;
            led[2+0-:1] = 1'h1;
            led[0+1-:2] = 2'h0;
            io_led[16+6+1-:2] = 1'h0;
            io_led[0+0+0-:1] = 1'h0;
            io_led[0+1+0-:1] = 1'h0;
            io_led[0+2+0-:1] = 1'h0;
            io_led[0+3+0-:1] = 1'h0;
            io_led[0+4+0-:1] = 1'h0;
            io_led[0+5+0-:1] = 1'h0;
            io_led[0+6+0-:1] = 1'h0;
            io_led[0+7+0-:1] = 1'h0;
            io_led[8+0+0-:1] = 1'h0;
            io_led[8+1+0-:1] = 1'h0;
            io_led[8+2+0-:1] = 1'h0;
            io_led[8+3+0-:1] = 1'h0;
            io_led[8+4+0-:1] = 1'h0;
            io_led[8+5+0-:1] = 1'h0;
            io_led[8+6+0-:1] = 1'h0;
            io_led[8+7+0-:1] = 1'h0;
            io_led[16+7+0-:1] = 1'h0;
            io_led[16+5+0-:1] = 1'h0;
            if (io_button[2+0-:1]) begin
              M_nextnumber_d = COMPUTE_nextnumber;
            end
          end
          COMPUTE_nextnumber: begin
            led[4+3-:4] = 4'h0;
            led[3+0-:1] = 1'h1;
            led[0+2-:3] = 3'h0;
            io_led[16+7-:8] = 8'h00;
            io_led[0+0+0-:1] = M_f_out[0+0-:1];
            io_led[0+1+0-:1] = M_f_out[1+0-:1];
            io_led[0+2+0-:1] = M_f_out[2+0-:1];
            io_led[0+3+0-:1] = M_f_out[3+0-:1];
            io_led[0+4+0-:1] = M_f_out[4+0-:1];
            io_led[0+5+0-:1] = M_f_out[5+0-:1];
            io_led[0+6+0-:1] = M_f_out[6+0-:1];
            io_led[0+7+0-:1] = M_f_out[7+0-:1];
            io_led[8+0+0-:1] = M_f_out[8+0-:1];
            io_led[8+1+0-:1] = M_f_out[9+0-:1];
            io_led[8+2+0-:1] = M_f_out[10+0-:1];
            io_led[8+3+0-:1] = M_f_out[11+0-:1];
            io_led[8+4+0-:1] = M_f_out[12+0-:1];
            io_led[8+5+0-:1] = M_f_out[13+0-:1];
            io_led[8+6+0-:1] = M_f_out[14+0-:1];
            io_led[8+7+0-:1] = M_f_out[15+0-:1];
            if (M_f_overflow > 1'h0) begin
              led[7+0-:1] = 1'h1;
            end
            if (io_button[3+0-:1]) begin
              M_nextnumber_d = NUM1_nextnumber;
              io_led = 24'h000000;
              led = 8'h00;
              M_f_a = M_leds_q;
              M_f_b = M_leds2_q;
              M_f_alufn = M_function_q;
            end
          end
        endcase
      end
      AUTO_testingmode: begin
        led[6+0-:1] = 1'h1;
        M_seg_values = M_autotest_out;
        if (io_dip[16+7+0-:1] == 1'h0) begin
          M_testingmode_d = MANUAL_testingmode;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_leds_q <= 1'h0;
      M_leds2_q <= 1'h0;
      M_function_q <= 1'h0;
      M_testingmode_q <= 1'h0;
      M_nextnumber_q <= 1'h0;
    end else begin
      M_leds_q <= M_leds_d;
      M_leds2_q <= M_leds2_d;
      M_function_q <= M_function_d;
      M_testingmode_q <= M_testingmode_d;
      M_nextnumber_q <= M_nextnumber_d;
    end
  end
  
endmodule
